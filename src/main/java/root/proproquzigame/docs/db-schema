create database quiz_db

create table main_category (
	main_category_id serial primary key,
	main_category_name text not null
)

create table sub_category (
    sub_category_id serial primary key,
    sub_category_name text not null,
    main_category_id int not null,
    foreign key (main_category_id) references main_category (main_category_id)
)

CREATE TYPE difficulty AS ENUM ('easy', 'medium', 'hard');

CREATE CAST (varchar AS difficulty) WITH INOUT AS IMPLICIT;

create table question (
	question_id serial primary key,
	question_text text not null,
	question_image bytea,
	difficulty difficulty not null,
	choice1 text not null,
	choice2 text not null,
	choice3 text not null,
	choice4 text not null,
	correct_answer int not null,
	explanation_text text not null,
	explanation_image bytea,
	sub_category_id int not null,
	foreign key (sub_category_id) references sub_category (sub_category_id)
)

insert into sub_category (sub_category_name, main_category_id)
values
('基礎', 1),
('ソート', 1),
('探索', 1),
('順次', 2),
('選択', 2),
('繰り返し', 2),
('変換', 3),
('基数の演算', 3),
('シフト', 3),
('プライバシー', 4),
('権利', 4),
('ウイルス', 4),
('配列', 5),
('スタック', 5),
('キュー', 5),
('リスト', 5),
('木構造', 5),
('基本形', 6),
('ベン図', 6),
('シフト', 6),
('日常の確率', 7),
('期待値', 7)

CREATE VIEW question_detail_view AS
SELECT
MC.main_category_id,
MC.main_category_name,
SC.sub_category_id, SC.sub_category_name,
Q.question_id,
Q.question_text,
Q.question_image,
Q.difficulty,
Q.choice1,
Q.choice2,
Q.choice3,
Q.choice4,
Q.correct_answer,
Q.explanation_text,
Q.explanation_image
FROM
main_category MC
join sub_category SC on MC.main_category_id = SC.main_category_id
join question Q on SC.sub_category_id = Q.sub_category_id

create table users (
	user_id serial primary key,
	username text not null,
	password text not null,
	age int not null,
	last_logged_in timestamp default NULL
)

create table user_answer (
	id serial primary key,
	user_id int,
	question_id int,
	is_correct boolean not null,
	answered_time timestamp default CURRENT_TIMESTAMP,
	foreign key (user_id) references users(user_id),
	foreign key (question_id) references question(question_id)
)

//querying the list of unanswered questions
select question_id, sub_category_id, question_text
from question
where question_id not in
(
	select question_id from user_answer
	where user_id = 2 and is_correct = true
)
and sub_category_id = 1

SELECT
    q.sub_category_id,
    sc.sub_category_name,
    COUNT(q.question_id) AS total_questions,
    COUNT(CASE WHEN ua.is_correct = TRUE AND ua.user_id = 3 THEN 1 END) AS correct_answers
FROM
    question q
JOIN
    sub_category sc ON q.sub_category_id = sc.sub_category_id
LEFT JOIN
    user_answer ua ON q.question_id = ua.question_id
GROUP BY
    q.sub_category_id, sc.sub_category_name
ORDER BY
    q.sub_category_id;

SELECT *
FROM question_detail_view
WHERE sub_category_id = 1
AND question_id NOT IN (
	select question_id from user_answer where user_id = 2 and is_correct = true
)
ORDER BY RANDOM()

// boss health for each category
select sc.sub_category_id,
count(q.question_id) as num_questions,
sum (
	case
		when q.difficulty = 'easy' then 10
		when q.difficulty = 'medium' then 20
		when q.difficulty = 'hard' then 30
	end
) as total_health
from sub_category sc
join question q on sc.sub_category_id = q.sub_category_id
group by sc.sub_category_id;


// overall total score of each user
CREATE VIEW user_total_score AS
SELECT u.user_id,
       SUM(
           CASE
               WHEN q.difficulty = 'easy' THEN 10
               WHEN q.difficulty = 'medium' THEN 20
               WHEN q.difficulty = 'hard' THEN 30
               ELSE 0
           END
       ) AS total_score
FROM users u
LEFT JOIN user_answer ua ON u.user_id = ua.user_id
LEFT JOIN question q ON ua.question_id = q.question_id AND ua.is_correct = true
GROUP BY u.user_id
ORDER BY u.user_id

// total score of each user for respective categories (e.g. Algorithm, Flowchart)
create view user_scores_by_category as
select ua.user_id, mc.main_category_id, mc.main_category_name,
sc.sub_category_id, sc.sub_category_name,
sum(
	case
	when q.difficulty = 'easy' then 10
	when q.difficulty = 'medium' then 20
	when q.difficulty = 'hard' then 30
	end
) as total_score
from user_answer ua
join question q on ua.question_id = q.question_id and ua.is_correct = true
join sub_category sc on sc.sub_category_id = q.sub_category_id
join main_category mc on mc.main_category_id = sc.main_category_id
group by ua.user_id, mc.main_category_id, sc.sub_category_id
order by ua.user_id


// total score of each user for respective main categories (e.g. Algorithm, Flowchart)
SELECT
    mc.main_category_id,
    mc.main_category_name,
    COUNT(q.question_id) AS total_questions,
    COUNT(CASE WHEN ua.is_correct = TRUE AND ua.user_id = 2 THEN 1 END) AS correct_count
FROM
    main_category mc
LEFT JOIN
    sub_category sc ON mc.main_category_id = sc.main_category_id
LEFT JOIN
    question q ON sc.sub_category_id = q.sub_category_id
LEFT JOIN
    user_answer ua ON q.question_id = ua.question_id
WHERE
    mc.main_category_id = 7  -- Optional: filter by a specific main category if needed
GROUP BY
    mc.main_category_id, mc.main_category_name
ORDER BY
    mc.main_category_id;


// get the total number of questions and the number of correct questions for a specific user
select
count(ua.question_id) as total_questions,
count(case when ua.is_correct = true and ua.user_id = 3 THEN 1 END) as correct_count
from users u
join user_answer ua on u.user_id = ua.user_id

// view for boss detail
create view boss_detail as
select sc.sub_category_id, sc.sub_category_name, count(*) as total_questions,
    sum (
        case
            when q.difficulty = 'easy' then 10
            when q.difficulty = 'medium' then 20
            when q.difficulty = 'hard' then 30
        end
    ) as total_health
from sub_category sc
join question q on sc.sub_category_id = q.sub_category_id
group by sc.sub_category_id;

//View for user_overall_statistics
CREATE VIEW user_overall_statistics AS
SELECT
    (SELECT COUNT(DISTINCT q.question_id)
     FROM question q) AS total_questions,
    u.user_id,
    u.username,
	u.age,
    COUNT(CASE WHEN ua.is_correct = TRUE THEN 1 END) AS correct_count,
    ROW_NUMBER() OVER (
        ORDER BY
            COUNT(CASE WHEN ua.is_correct = TRUE THEN 1 END) DESC,
            u.username ASC
    ) AS user_rank
FROM
    users u
LEFT JOIN
    user_answer ua ON u.user_id = ua.user_id
LEFT JOIN
    question q ON q.question_id = ua.question_id
GROUP BY
    u.user_id, u.username;


create table trophy (
	trophy_id serial primary key,
	trophy_name varchar(50) not null
)

create table user_trophy (
	user_id int not null,
	trophy_id int not null,
	is_notified boolean default false,
	foreign key (user_id) references users(user_id),
	foreign key (trophy_id) references trophy(trophy_id)
)

// View for user_statistics_by_main_category
CREATE VIEW user_statistics_by_main_category AS
SELECT
	mc.main_category_id,
    mc.main_category_name,
    u.user_id,
    total_questions.total_questions,
    COUNT(CASE WHEN ua.is_correct = TRUE THEN 1 END) AS correct_count
FROM
    users u
-- Left join to ensure every user is listed
CROSS JOIN
    main_category mc
LEFT JOIN
    sub_category sc ON sc.main_category_id = mc.main_category_id
LEFT JOIN
    question q ON q.sub_category_id = sc.sub_category_id
LEFT JOIN
    user_answer ua ON ua.user_id = u.user_id AND ua.question_id = q.question_id
-- Subquery to get the total distinct questions per main category
JOIN (
    SELECT
        mc.main_category_id,
        COUNT(DISTINCT q.question_id) AS total_questions
    FROM
        question q
    LEFT JOIN
        sub_category sc ON sc.sub_category_id = q.sub_category_id
    LEFT JOIN
        main_category mc ON mc.main_category_id = sc.main_category_id
    GROUP BY
        mc.main_category_id
) total_questions ON total_questions.main_category_id = mc.main_category_id
GROUP BY
    mc.main_category_id, mc.main_category_name, u.user_id, total_questions.total_questions
order by u.user_id


// View for user_statistics_by_sub_category
CREATE VIEW user_statistics_by_sub_category AS
SELECT
    mc.main_category_id,
	mc.main_category_name,
    sc.sub_category_id,
    sc.sub_category_name,
    u.user_id,
    total_questions.total_questions,
    COUNT(CASE WHEN ua.is_correct = TRUE THEN 1 END) AS correct_count
FROM
    users u
-- Cross join to ensure every user is listed
CROSS JOIN
    sub_category sc
LEFT JOIN main_category mc ON mc.main_category_id = sc.main_category_id
LEFT JOIN question q ON q.sub_category_id = sc.sub_category_id
LEFT JOIN user_answer ua ON ua.user_id = u.user_id AND ua.question_id = q.question_id
-- Subquery to get the total distinct questions per sub-category
JOIN (
    SELECT
        sc.sub_category_id,
        COUNT(DISTINCT q.question_id) AS total_questions
    FROM
        question q
    LEFT JOIN sub_category sc ON sc.sub_category_id = q.sub_category_id
    GROUP BY
        sc.sub_category_id
) total_questions ON total_questions.sub_category_id = sc.sub_category_id
GROUP BY
    mc.main_category_id,
	mc.main_category_name,
    sc.sub_category_id,
    sc.sub_category_name,
    u.user_id,
    total_questions.total_questions
ORDER BY
    u.user_id, mc.main_category_id, sc.sub_category_id;
